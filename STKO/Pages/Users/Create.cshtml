@page
@model CreateModel

<h5 class="bg-dark text-white text-center p-2">Skapa användare</h5>
<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="UserName"></label>
        <div><span asp-validation-for="UserName" class="text-danger"></span></div>
        <input asp-for="UserName" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="Email"></label>
        <div><span asp-validation-for="Email" class="text-danger"></span></div>
        <input asp-for="Email" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="Password"></label>
        <div><span asp-validation-for="Password" class="text-danger"></span></div>
        <input asp-for="Password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Skapa</button>
    <a class="btn btn-secondary" asp-page="List">Tillbaka</a>
</form>

@section ValidationScripts{<partial name="_ValidationScriptsPartial" />}

@functions {

    /// <summary>
    /// Holds the logic to create a new user
    /// </summary>
    [BindProperties]
    public class CreateModel : AdminPageModel
    {
        private readonly UserManager<ApplicationUser> UserManager;

        public CreateModel(UserManager<ApplicationUser> usrManager) => UserManager = usrManager;

        [Required(ErrorMessage = "Du måste ange ett användarnamn")]
        [Display(Name = "Användarnamn", Prompt = "Användarnamn")]
        public string UserName { get; set; }

        [Required(ErrorMessage = ("Du måste ange en Epost-adress"))]
        [EmailAddress(ErrorMessage = "Epost-adressen har ett felaktigt format")]
        [Display(Name = "Epost-adress",Prompt = "Epost-adress")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Du måste ange ett lösenord")]
        [Display(Name = "Lösenord", Prompt = "Lösenord")]
        [UIHint("Password")]
        public string Password { get; set; }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                ApplicationUser user = new() { UserName = UserName, Email = Email };

                IdentityResult result = await UserManager.CreateAsync(user, Password);

                if (result.Succeeded)
                {
                    return RedirectToPage("List");
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}
