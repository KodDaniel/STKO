@page
@model ListModel

<h3>Roller</h3>
<table class="table table-sm table-bordered">
    <tr><th>ID</th><th>Rollnamn</th><th></th></tr>
    @if (!Model.Roles.Any()) 
    {
        <tr><td colspan="4" class="text-center">Inga roller finns att visa</td></tr>
    } 
    else 
    {
        foreach (IdentityRole role in Model.Roles) 
        {
            <tr>
                <td>@role.Id</td>
                <td>@role.Name</td>
                <td class="text-center">
                    <form asp-page="List" method="post">
                        <input type="hidden" name="Id" value="@role.Id" />
                        <a class="btn btn-sm btn-primary" asp-page="Editor" asp-route-id="@role.Id">Hantera</a>
                        <button role-delete-button="@role.Name"  type="submit" class="btn btn-sm btn-danger">Radera</button>
                    </form>
                </td>
            </tr>
        }
    }
</table>
<a class="btn btn-primary" asp-page="create">Skapa ny roll</a>

@functions {
    /// <summary>
    /// Holds the logic to display all roles in the application
    /// </summary>
    public class ListModel : AdminPageModel
    {
        private readonly RoleManager<IdentityRole> RoleManager;

        public ListModel( RoleManager<IdentityRole> roleManager) => RoleManager = roleManager;

        public IEnumerable<IdentityRole> Roles { get; set; }

        public void OnGet() => Roles = RoleManager.Roles;

        public async Task<IActionResult> OnPostAsync(string id)
        {
            IdentityRole role = await RoleManager.FindByIdAsync(id);
            await RoleManager.DeleteAsync(role);
            return RedirectToPage();
        }


       
    }
}
