@page
@model LoginModel
 
<div class="bg-dark text-center text-white p-2"><h4>Logga in</h4></div>

<div class="m-1 text-danger" asp-validation-summary="All"></div>

<form method="post">
    <input asp-for="ReturnUrl" hidden/>
    <div class="form-group">
        <label asp-for="UserName"></label>
        <div><span asp-validation-for="UserName" class="text-danger"></span></div>
        <input class="form-control" asp-for="UserName" />
    </div>
    <div class="form-group">
        <label asp-for="Password"></label>
        <div><span asp-validation-for="Password" class="text-danger"></span></div>
        <input asp-for="Password" type="password" class="form-control" />
    </div>
    <button class="btn btn-primary" type="submit">Logga in</button>
</form>

@* Notera användningen av Sections för att se till att placera Valideringsscripten längst ner i bodyn (se referens i layoutfil) *@
@section ValidationScripts{ <partial name="_ValidationScriptsPartial"/>}

@functions {

    /// <summary>
    /// Holds the logic for the login page
    /// </summary>
    [BindProperties]
    public class LoginModel : PageModel
    {
        [Required(ErrorMessage = "Du måste ange ett användarnamn")]
        [Display(Name = "Användarnamn", Prompt = "Användarnamn")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Du måste ange ett lösenord")]
        [Display(Name = "Lösenord", Prompt = "Lösenord")]
        [UIHint("Password")]
        public string Password { get; set; }

        private readonly SignInManager<ApplicationUser> signInManager;

        public LoginModel(SignInManager<ApplicationUser> signinMgr) => signInManager = signinMgr;

        [BindProperty(SupportsGet = true)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Holds logic for the login
        /// </summary>
        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                Microsoft.AspNetCore.Identity.SignInResult result = await signInManager.PasswordSignInAsync(UserName, Password, false, false);

                if (result.Succeeded)
                {
                    //Återvänd till den URL användaren kom ifrån eller gå till Skapa-prov-sidan
                    return (ReturnUrl != null) ? LocalRedirect(ReturnUrl) : RedirectToAction("CreateExam", "Exam");
                }

                ModelState.AddModelError("", "Felaktigt lösenord eller användarnamn");
            }
            return Page();
        }
    }
}
