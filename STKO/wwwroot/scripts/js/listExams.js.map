{"version":3,"file":"listExams.js","mappings":"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","sources":["C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\sharedTypes.ts","C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\sortExamTableRows.ts","C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\sortTableRows.ts","C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\sortTuples.ts","webpack/bootstrap","webpack/runtime/define property getters","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\listExams.ts"],"sourcesContent":["export type Question = {\r\n    questionId: number,\r\n    query: string,\r\n    answer: string;\r\n};\r\n\r\nexport type Exam = {\r\n    examId: number,\r\n    examName: string,\r\n    examTime: string,\r\n    createDate:string,\r\n    changeDate: string,\r\n    randomOrder: string,\r\n    sendReminderDate: string,\r\n    userId: string,\r\n    questions?: Question[]\r\n};\r\n\r\nexport enum HttpVerb {\r\n    GET = \"GET\",\r\n    POST = \"POST\",\r\n    DELETE = \"DELETE\",\r\n    PATCH = \"PATCH\",\r\n    PUT = \"PUT\"\r\n};\r\n\r\n\r\n\r\n","export enum SortOrder { ASC = \"ASC\", DESC = \"DESC\" };\r\nexport type ExamColumnNames = \"ExamName\" | \"ExamTime\" | \"RandomOrder\" | \"ChangeDate\" | \"CreateDate\" | \"SendReminderDate\";\r\nimport SortTableRows from \"./sortTableRows\";\r\n\r\n/**\r\n*A class that sorts an exam table\r\n*/\r\nexport class SortExamTableRows extends SortTableRows\r\n{\r\n    constructor(tupleToSort: [string, HTMLTableRowElement][], columnToSort: ExamColumnNames, sortOrder: SortOrder)\r\n    {\r\n        \r\n        switch (columnToSort) {\r\n             \r\n            case \"ExamName\":\r\n                SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortExamNameDESC : SortExamTableRows.sortExamNameASC;\r\n                break;\r\n            case \"ExamTime\":\r\n                SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortExamTimeDESC : SortExamTableRows.sortExamTimeASC;\r\n                break;\r\n            case\r\n                \"RandomOrder\": SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortRandomOrderDESC : SortExamTableRows.sortRandomOrderASC;\r\n                break;\r\n\r\n            case \"SendReminderDate\":\r\n            case \"CreateDate\":\r\n            case \"ChangeDate\":\r\n                SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortDateDESC : SortExamTableRows.sortDateASC;\r\n                break;\r\n\r\n        }\r\n\r\n        super(tupleToSort);\r\n    }\r\n\r\n    //Varje sorteringsfunktion extraherar det första värden i tuplen, varav detta värde fungerar som bas för sorteringen (detta värde är det som sorteras på)\r\n    private static sortExamNameDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        if (colValue1[0] < colValue2[0]) return -1;\r\n        if (colValue1[0] > colValue2[0]) return 1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortExamNameASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        if (colValue1[0] < colValue2[0]) return 1;\r\n        if (colValue1[0] > colValue2[0]) return -1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortRandomOrderDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        if (colValue1[0] < colValue2[0]) return -1;\r\n        if (colValue1[0] > colValue2[0]) return 1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortRandomOrderASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        if (colValue1[0] < colValue2[0]) return 1;\r\n        if (colValue1[0] > colValue2[0]) return -1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortExamTimeDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        // Om colValue1[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue1[0])) return 1;\r\n        // Om colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue2[0])) return -1;\r\n        // Om  både colValue1[0] och colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue1[0]) && !parseInt(colValue2[0])) return 0;\r\n        // Annars - sortera på nummer - (notera konverteringen från string till integer) - i fallande ordning\r\n        return parseInt(colValue1[0]) > parseInt(colValue2[0]) ? -1 : 1;\r\n\r\n    };\r\n\r\n    private static sortExamTimeASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        if (!parseInt(colValue1[0])) return -1;\r\n        // Om colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue2[0])) return 1;\r\n        // Om  både colValue1[0] och colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue1[0]) && !parseInt(colValue2[0])) return 0;\r\n        // Annars - sortera på nummer - (notera konverteringen från string till integer) - i stigande ordning\r\n        return parseInt(colValue1[0]) > parseInt(colValue2[0]) ? 1 : -1;\r\n    };\r\n\r\n    //Tryck på denna länk för att förstå varför vi använder type assertion (as-operatorn) i sorteringsfunktion för datum:\r\n    // https://docs.google.com/document/d/1ZZkkeaaiFfnY1Ujsms5EpsBL88YcuavVsP2YTgYtxhk/edit#heading=h.cfnw4c1xhjip\r\n\r\n    private static sortDateDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        //Om både colValue1[0] och colValue2[0] är \"Nej\"\r\n        if (!Date.parse(colValue1[0]) && !Date.parse(colValue2[0])) return 0;\r\n        // Om colValue1[0] = \"Nej\"\r\n        if (!Date.parse(colValue1[0])) return 1;\r\n        // Om colValue2[0] = \"Nej\"\r\n        if (!Date.parse(colValue2[0])) return -1;\r\n        // Om både colValue1[0] och colValue2[0] är giltiga datum, sortera fallande\r\n        //Se länk varför vi använder valueOf: https://stackoverflow.com/posts/60688789/timeline\r\n        return new Date(colValue2[0]).valueOf() - new Date(colValue1[0]).valueOf() as 1 | -1 | 0;\r\n    };\r\n\r\n    private static sortDateASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        //Om både colValue1[0] och colValue2[0] är \"Nej\"\r\n        if (!Date.parse(colValue1[0]) && !Date.parse(colValue2[0])) return 0;\r\n        // Om colValue1[0] = \"Nej\" \r\n        if (!Date.parse(colValue1[0])) return -1;\r\n        // Om colValue2[0] = \"Nej\"\r\n        if (!Date.parse(colValue2[0])) return 1;\r\n        // Om både colValue1[0] och colValue2[0] är giltiga datum, sortera stigande\r\n        //Se länk varför vi använder valueOf: https://stackoverflow.com/posts/60688789/timeline\r\n        return new Date(colValue1[0]).valueOf() - new Date(colValue2[0]).valueOf() as 1 | -1 | 0;\r\n    };\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import SortTuples from \"./sortTuples\";\r\n\r\n/**\r\n*An abstract superclass that brings together common behaviors for specific table sorting classes\r\n*/\r\nexport default abstract class SortTableRows extends SortTuples<string, HTMLTableRowElement>\r\n{\r\n   //Vi lagrar en funktion (sorteringspredikatet) i ett fält\r\n   protected static sortPredicate: (compare1: [string, HTMLTableRowElement], compare2: [string, HTMLTableRowElement]) => 1 | -1 | 0;\r\n\r\n    constructor(colValuesWithRows: [string, HTMLTableRowElement][])\r\n    {\r\n        super(colValuesWithRows, SortTableRows.sortPredicate);\r\n    }\r\n}","\r\n/**\r\n* A generic class that allows us to sort tuples\r\n*/\r\n//Tuples istället för Map tillåter oss att hålla identiska sorteringsvärden (t.ex flera av \"Ja\")\r\n//Typen T kan vidgas/utökas vid behov\r\n//Du skulle även kunna använda en conditional type för att t.ex se till att arrayer inte används som T\r\nexport default class SortTuples<T extends string, K> \r\n{\r\n    readonly sortedTuples: [T, K][];\r\n    readonly sortedRelatedValues: K[] = []; \r\n     \r\n    //sortPredicate är en funktion som vi skickar som argument till constructorn \r\n    constructor(tuplesToSort: [T, K][], sortPredicate: (compare1: [T, K], compare2: [T, K]) => 1 | -1 | 0) {\r\n        this.sortedTuples = tuplesToSort.sort(sortPredicate);\r\n\r\n        this.sortedTuples.forEach(tuple => {\r\n            const [, relatedValue] = tuple;\r\n            this.sortedRelatedValues.push(relatedValue);\r\n\r\n        });\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Exam, HttpVerb } from \"./sharedTypes\";\r\nenum InitialCall { false, true }\r\nimport { SortOrder, SortExamTableRows, ExamColumnNames } from \"./sortExamTableRows\";\r\n \r\nconst contentDiv = document.getElementById(\"Content\") as HTMLDivElement | null;\r\nconst tbody = document.getElementById(\"Examtbody\") as HTMLTableElement | null;\r\nconst table = document.querySelector(\"Table\") as HTMLTableElement | null;\r\n \r\nconst loadExamsFromServer = (callOrder: InitialCall):void => {\r\n    $.ajax({ \r\n        type: HttpVerb.GET,\r\n        contentType: \"application/json\",\r\n        url: \"/api/ExamContent/GetExamsForUser\",\r\n        success: (exams: Exam[]) =>\r\n        {\r\n            //Om vi har prov i databasen\r\n            if (exams.length > 0)\r\n            {\r\n                table?.removeAttribute(\"hidden\");\r\n\r\n                (InitialCall.true) ? contentDiv?.removeAttribute(\"hidden\") : tbody!.innerHTML = \"\";\r\n\r\n                //Första anropet\r\n                if (callOrder === InitialCall.true)\r\n                {\r\n                    contentDiv?.removeAttribute(\"hidden\");\r\n                    insertInTable(exams);\r\n                    //Simulera ett klick för att initialt sortera på CreateDate\r\n                    (document.getElementById(\"SortByCreateDateLink\") as HTMLAnchorElement | null)?.click();\r\n                }\r\n                //Alla andra anrop\r\n                if (callOrder === InitialCall.false)\r\n                {\r\n                    tbody!.innerHTML = \"\";\r\n                    insertInTable(exams);\r\n                }\r\n            }\r\n            //Inga prov finns i databasen\r\n            else\r\n            {\r\n                table?.setAttribute(\"hidden\", \"true\");\r\n                contentDiv?.removeAttribute(\"hidden\");\r\n                const headlineDiv = document.getElementById(\"Headline\") as HTMLDivElement | null;\r\n                headlineDiv?.insertAdjacentHTML(\"beforeend\",\r\n                    \"<h3 class='text-white text-center bg-dark'>Det finns inga prov att visa</h3>\");\r\n            }\r\n\r\n        },\r\n        error: (response) => {\r\n            console.log(response.responseText);\r\n        }\r\n    }); \r\n};\r\n\r\nconst insertInTable = (exams: Exam[]):void => {\r\n    const rows:string[] = exams.map(exam => {\r\n\r\n        const { examId, examName, examTime, createDate, changeDate, sendReminderDate, randomOrder }: Exam = exam;\r\n        return `<tr> \r\n                    <td id=\"ExamNameCol\"><a href=\"/Exam/DisplayExam/${examId}\">${examName}</a></td>\r\n                    <td id=\"CreateDateCol\">${createDate}</td>\r\n                    <td id=\"ChangeDateCol\">${changeDate}</td>\r\n                    <td id=\"ExamTimeCol\">${examTime}</td>\r\n                    <td id=\"RandomOrderCol\">${randomOrder}</td>\r\n                    <td id=\"SendReminderDateCol\">${sendReminderDate}</td>\r\n                    <td>\r\n                        <button id=\"DeleteBtn\" examId=${examId} class=\"btn-danger\">Radera</button>\r\n                    </td>\r\n                </tr>`;\r\n\r\n    });\r\n\r\n    rows.forEach(row => {\r\n        tbody?.insertAdjacentHTML(\"beforeend\", row);\r\n    });\r\n};\r\n\r\n\r\ntbody?.addEventListener(\"click\",\r\n    (event: MouseEvent) => {\r\n\r\n        const deleteBtn = event.target as HTMLButtonElement | null;\r\n\r\n        //Vi vi säkerställa att det är en HTMLBUTTON vi klickat på med ID:et \"DeleteBtn\" \r\n        //Om elementet vi klickat på INTE är av av typen \"HTMLButtonElement\" kommer villkoret till vänster bli false...\r\n        //...eftersom deleteBtn då är null\r\n        if (deleteBtn && deleteBtn.id === \"DeleteBtn\")\r\n        {\r\n            if (!confirm(\"Är du säker på att du vill radera provet?\"))\r\n            {\r\n                event.preventDefault();\r\n            }\r\n            else\r\n            { \r\n                const examId:string|null = deleteBtn.getAttribute(\"examId\");\r\n\r\n                $.ajax({\r\n                    type: HttpVerb.DELETE,\r\n                    url: `/api/ExamContent/${examId}`,\r\n                    success: (response) =>\r\n                    {\r\n                        loadExamsFromServer(InitialCall.false);\r\n                    },\r\n                    error: (response) =>\r\n                    {\r\n                    //    console.log(response.responseText);\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n//När sidan laddas in från servern första gången \r\nloadExamsFromServer(InitialCall.true);\r\n\r\n//SORTERING NEDAN\r\n//--------------------------------------------------------------------------------------------------------------------------------------\r\nconst sortColumns = document.getElementsByClassName(\"fa fa-sort\") as HTMLCollectionOf<HTMLAnchorElement> | null;\r\nfor (let sortColumn of sortColumns!)\r\n{\r\n    sortColumn.addEventListener(\"click\", (event): void => {\r\n\r\n        event.preventDefault();\r\n            //Hämta den ordning som kolumnen ska sorteras på.\r\n            const sortOrder: SortOrder = determineSortOrderForColumn(sortColumn?.closest(\"th\")?.getAttribute(\"sortOrder\") as SortOrder);\r\n\r\n            const rows: NodeListOf<HTMLTableRowElement> | null = document.querySelectorAll(\"#Examtbody tr\");\r\n\r\n            // Hämta namn på den kolumn som ska sorteras\r\n            const columnNameToSortBy = sortColumn?.previousElementSibling?.getAttribute(\"for\") as ExamColumnNames;\r\n\r\n            // Hämta arrayen med tuples som utgör grunden för påföljande sortering\r\n            const tupleArray: [string, HTMLTableRowElement][] = getColumnValueWithRowTuplesArray(columnNameToSortBy, rows);\r\n\r\n            //Sortera\r\n            const sortRows = new SortExamTableRows(tupleArray, columnNameToSortBy, sortOrder);\r\n\r\n            //Extrahera de sorterade raderna \r\n            const sortedRows: HTMLTableRowElement[] = sortRows.sortedRelatedValues;\r\n\r\n            if (sortedRows.length === rows.length)\r\n            {\r\n                //Uppdaterar sorteringsordningen för kolumnen\r\n                sortColumn?.closest(\"th\")?.setAttribute(\"sortOrder\", sortOrder);\r\n            }\r\n            else\r\n            { \r\n                throw Error(\"Row length does not match\");\r\n            }\r\n\r\n            //Sätt in de sorterade raderna i tabellen\r\n            insertSortedRows(sortedRows, rows);\r\n        });\r\n}\r\n\r\nconst determineSortOrderForColumn = (currentSortOrder: SortOrder): SortOrder =>\r\n    currentSortOrder === SortOrder.DESC ? SortOrder.ASC : SortOrder.DESC;\r\n\r\n\r\n//Returnerar samtliga värden i vertikal riktning för den specifika kolumnen (som ska sorteras på)\r\nconst getColumnValues = (columnNameToSortBy: string | undefined | null, rows: HTMLTableRowElement[]): string[] =>\r\n{\r\n    const columnValues: string[] = [];\r\n\r\n    for (let row of rows)\r\n    {\r\n        columnValues.push(getColumnValue(columnNameToSortBy,row)!);\r\n    }\r\n    return columnValues;\r\n};\r\n \r\n//Stödfunktion för att undvika att fortsätta loopa genom cellerna på en specifik rad i tabellen NÄR VI REDAN hittat vårt värde\r\n//Åstadkommer detta genom att bryta ut loopen till funktionen nedan vilket möjliggör nyttjandet av ett return-statement (vi avbryter loopen)\r\nconst getColumnValue = (columnNameToSortBy: string | undefined|null, row: HTMLTableRowElement): string | undefined =>\r\n{\r\n    for (let i = 0; i < row.cells.length; i++)\r\n    {\r\n        let column = row.cells[i];\r\n\r\n        if (column.getAttribute(\"id\") === `${columnNameToSortBy}Col`)\r\n        {\r\n            //returnera värdet och avbryt loop(gå ur funktionen)\r\n            return column.innerText.trim();\r\n        }\r\n    }\r\n    //Ingen matchning\r\n    return undefined;\r\n};  \r\n\r\n//Notera: returvärdet för denna funktionen är en array av tuples\r\nconst getColumnValueWithRowTuplesArray = (columnNameToSortBy: string | undefined | null, rows: NodeListOf<HTMLTableRowElement>): [string, HTMLTableRowElement][] =>\r\n{ \r\n   // Hämta kolumnvärden som ska sorteras\r\n    const columnValues:string[] = getColumnValues(columnNameToSortBy, [...rows]);\r\n\r\n    const columnValueWithRowTuples: [string, HTMLTableRowElement][] =[];\r\n\r\n    for (let i = 0; i < rows.length; i++) \r\n    {\r\n        const columnValue: string = columnValues[i];\r\n        const relatedtRow = rows[i];\r\n\r\n        const tuple: [string, HTMLTableRowElement] = [columnValue, relatedtRow];\r\n\r\n        columnValueWithRowTuples.push(tuple);\r\n    }\r\n\r\n    return columnValueWithRowTuples;\r\n};\r\n\r\nconst insertSortedRows = (sortedRows: HTMLTableRowElement[], rows: NodeListOf<HTMLTableRowElement>): void => {\r\n    for (let rowNumber = 0; rowNumber < rows.length; rowNumber++) {\r\n        rows[rowNumber].outerHTML = sortedRows[rowNumber].outerHTML;\r\n    }\r\n\r\n} \r\n//const setUserName = () =>\r\n//{\r\n//    //Hämta användarnamn från navbar\r\n//    const loggedInLink = document.getElementById(\"LoggedInLink\") as HTMLAnchorElement | null;\r\n//    const username: string | undefined = loggedInLink?.innerText.split(\" \")[2].trim();\r\n//    const usernamePosition = contentDiv?.querySelector(\"#Headline\") as HTMLHeadingElement | null;\r\n\r\n//    if (username && usernamePosition) {\r\n//        usernamePosition.insertAdjacentHTML(\"afterbegin\",\r\n//            `<h2 class=\"text text-center\"><i>Prov för ${username}</i></h2></br>`);\r\n//    }\r\n\r\n//};\r\n\r\n\r\n"],"names":[],"sourceRoot":""}