{"version":3,"file":"formClientValidation.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACHO,MAAM,oBAAoB;IAE7B,MAAM,CAAC,0BAA0B,CAAC,MAAkB;QAEhD,MAAM,GAAG,GAAG,IAAI,GAAG,EAA0B,CAAC;QAE9C,4DAA4D;QAC5D,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE1C,iCAAiC;QACjC,MAAM,cAAc,GAAe,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAGzD,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,EACzD;YACI,MAAM,GAAG,GAAmB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;YAEjE,qEAAqE;YACrE,MAAM,YAAY,GAAuC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACzF,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEvG,GAAG,CAAC,qBAAqB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAEtD,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;SACtC;QAED,OAAO,GAAG,CAAC;IACf,CAAC;IAEO,MAAM,CAAC,SAAS,CAAC,YAAoB;QACzC,MAAM,GAAG,GAAmB,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1D,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACjC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,YAAY,QAAQ,CAAC,CAAC;QAChD,OAAO,GAAG,CAAC;IACf,CAAC;IAMO,MAAM,CAAC,kBAAkB,CAAC,MAAyB;QACvD,mEAAmE;QACnE,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC5B,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACnD,WAAW,CAAC,kBAAkB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACrD,OAAO,WAAW,CAAC;SACtB;QACD,gEAAgE;aAC3D;YACD,MAAM,SAAS,GAAqB,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAEjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,MAAM,SAAS,GAAkB,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBAC9D,SAAS,CAAC,kBAAkB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtD,SAAS,CAAC,qBAAqB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;aAC3D;YAED,OAAO,SAAS,CAAC;SACpB;IAEL,CAAC;CACJ","sources":["webpack/bootstrap","webpack/runtime/define property getters","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\formClientValidation.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export type JSONerrors = { [index: string]: string[]; };\r\n\r\n\r\nexport class FormClientValidation\r\n{\r\n    static getValidationErrorElements(errors: JSONerrors): Map<string, HTMLDivElement>\r\n    {\r\n        const map = new Map<string, HTMLDivElement>();\r\n\r\n        //Namnen på alla input-fält som har en misslyckad validering\r\n        const propertyNames = Object.keys(errors);\r\n\r\n        //Alla errors för respektive fält\r\n        const propertyErrors: string[][] = Object.values(errors);\r\n\r\n\r\n        for (let index = 0; index < propertyNames.length; index++)\r\n        {\r\n            const div: HTMLDivElement = this.createDiv(propertyNames[index]);\r\n\r\n            //Om vi har flera fel får vi ett UL-element, annars ett Span-element \r\n            const errorElement: HTMLUListElement | HTMLSpanElement = (propertyErrors[index].length > 1) ?\r\n                this.createErrorMessage(propertyErrors[index]) : this.createErrorMessage(propertyErrors[index][0]);\r\n\r\n            div.insertAdjacentElement(\"afterbegin\", errorElement);\r\n\r\n            map.set(propertyNames[index], div);\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    private static createDiv(propertyName: string): HTMLDivElement {\r\n        const div: HTMLDivElement = document.createElement(\"div\");\r\n        div.classList.add(\"text-danger\");\r\n        div.setAttribute(\"id\", `${propertyName}-error`);\r\n        return div;\r\n    }\r\n\r\n    //Type Overloads\r\n    private static createErrorMessage(propertyError: string): HTMLSpanElement;\r\n    private static createErrorMessage(propertyErrors: string[]): HTMLUListElement;\r\n\r\n    private static createErrorMessage(errors: string[] | string): HTMLUListElement | HTMLSpanElement {\r\n        //Om vi endast har 1 fel kopplat till det specifika input-elementet\r\n        if (typeof errors === \"string\") {\r\n            const spanElement = document.createElement(\"span\");\r\n            spanElement.insertAdjacentText(\"afterbegin\", errors);\r\n            return spanElement;\r\n        }\r\n        //Om vi har flera fel kopplat till det specifika input-elementet\r\n        else {\r\n            const ulElement: HTMLUListElement = document.createElement(\"ul\");\r\n\r\n            for (let i = 0; i < errors.length; i++) {\r\n                const liElement: HTMLLIElement = document.createElement(\"li\");\r\n                liElement.insertAdjacentText(\"afterbegin\", errors[i]);\r\n                ulElement.insertAdjacentElement(\"beforeend\", liElement);\r\n            }\r\n\r\n            return ulElement;\r\n        }\r\n\r\n    }\r\n}"],"names":[],"sourceRoot":""}