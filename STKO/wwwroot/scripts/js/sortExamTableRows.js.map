{"version":3,"file":"sortExamTableRows.js","mappings":"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","sources":["C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\sortTableRows.ts","C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\sortTuples.ts","webpack/bootstrap","webpack/runtime/define property getters","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","C:\\Users\\danie\\source\\repos\\STKOSolution\\STKO\\wwwroot\\scripts\\ts\\sortExamTableRows.ts"],"sourcesContent":["import SortTuples from \"./sortTuples\";\r\n\r\n/**\r\n*An abstract superclass that brings together common behaviors for specific table sorting classes\r\n*/\r\nexport default abstract class SortTableRows extends SortTuples<string, HTMLTableRowElement>\r\n{\r\n   //Vi lagrar en funktion (sorteringspredikatet) i ett fält\r\n   protected static sortPredicate: (compare1: [string, HTMLTableRowElement], compare2: [string, HTMLTableRowElement]) => 1 | -1 | 0;\r\n\r\n    constructor(colValuesWithRows: [string, HTMLTableRowElement][])\r\n    {\r\n        super(colValuesWithRows, SortTableRows.sortPredicate);\r\n    }\r\n}","\r\n/**\r\n* A generic class that allows us to sort tuples\r\n*/\r\n//Tuples istället för Map tillåter oss att hålla identiska sorteringsvärden (t.ex flera av \"Ja\")\r\n//Typen T kan vidgas/utökas vid behov\r\n//Du skulle även kunna använda en conditional type för att t.ex se till att arrayer inte används som T\r\nexport default class SortTuples<T extends string, K> \r\n{\r\n    readonly sortedTuples: [T, K][];\r\n    readonly sortedRelatedValues: K[] = []; \r\n     \r\n    //sortPredicate är en funktion som vi skickar som argument till constructorn \r\n    constructor(tuplesToSort: [T, K][], sortPredicate: (compare1: [T, K], compare2: [T, K]) => 1 | -1 | 0) {\r\n        this.sortedTuples = tuplesToSort.sort(sortPredicate);\r\n\r\n        this.sortedTuples.forEach(tuple => {\r\n            const [, relatedValue] = tuple;\r\n            this.sortedRelatedValues.push(relatedValue);\r\n\r\n        });\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export enum SortOrder { ASC = \"ASC\", DESC = \"DESC\" };\r\nexport type ExamColumnNames = \"ExamName\" | \"ExamTime\" | \"RandomOrder\" | \"ChangeDate\" | \"CreateDate\" | \"SendReminderDate\";\r\nimport SortTableRows from \"./sortTableRows\";\r\n\r\n/**\r\n*A class that sorts an exam table\r\n*/\r\nexport class SortExamTableRows extends SortTableRows\r\n{\r\n    constructor(tupleToSort: [string, HTMLTableRowElement][], columnToSort: ExamColumnNames, sortOrder: SortOrder)\r\n    {\r\n        \r\n        switch (columnToSort) {\r\n             \r\n            case \"ExamName\":\r\n                SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortExamNameDESC : SortExamTableRows.sortExamNameASC;\r\n                break;\r\n            case \"ExamTime\":\r\n                SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortExamTimeDESC : SortExamTableRows.sortExamTimeASC;\r\n                break;\r\n            case\r\n                \"RandomOrder\": SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortRandomOrderDESC : SortExamTableRows.sortRandomOrderASC;\r\n                break;\r\n\r\n            case \"SendReminderDate\":\r\n            case \"CreateDate\":\r\n            case \"ChangeDate\":\r\n                SortTableRows.sortPredicate = (sortOrder === SortOrder.DESC) ? SortExamTableRows.sortDateDESC : SortExamTableRows.sortDateASC;\r\n                break;\r\n\r\n        }\r\n\r\n        super(tupleToSort);\r\n    }\r\n\r\n    //Varje sorteringsfunktion extraherar det första värden i tuplen, varav detta värde fungerar som bas för sorteringen (detta värde är det som sorteras på)\r\n    private static sortExamNameDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        if (colValue1[0] < colValue2[0]) return -1;\r\n        if (colValue1[0] > colValue2[0]) return 1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortExamNameASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        if (colValue1[0] < colValue2[0]) return 1;\r\n        if (colValue1[0] > colValue2[0]) return -1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortRandomOrderDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        if (colValue1[0] < colValue2[0]) return -1;\r\n        if (colValue1[0] > colValue2[0]) return 1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortRandomOrderASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        if (colValue1[0] < colValue2[0]) return 1;\r\n        if (colValue1[0] > colValue2[0]) return -1;\r\n        return 0;\r\n    };\r\n\r\n    private static sortExamTimeDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        // Om colValue1[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue1[0])) return 1;\r\n        // Om colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue2[0])) return -1;\r\n        // Om  både colValue1[0] och colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue1[0]) && !parseInt(colValue2[0])) return 0;\r\n        // Annars - sortera på nummer - (notera konverteringen från string till integer) - i fallande ordning\r\n        return parseInt(colValue1[0]) > parseInt(colValue2[0]) ? -1 : 1;\r\n\r\n    };\r\n\r\n    private static sortExamTimeASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        if (!parseInt(colValue1[0])) return -1;\r\n        // Om colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue2[0])) return 1;\r\n        // Om  både colValue1[0] och colValue2[0] inte är ett nummer (i detta fall \"Ingen\")\r\n        if (!parseInt(colValue1[0]) && !parseInt(colValue2[0])) return 0;\r\n        // Annars - sortera på nummer - (notera konverteringen från string till integer) - i stigande ordning\r\n        return parseInt(colValue1[0]) > parseInt(colValue2[0]) ? 1 : -1;\r\n    };\r\n\r\n    //Tryck på denna länk för att förstå varför vi använder type assertion (as-operatorn) i sorteringsfunktion för datum:\r\n    // https://docs.google.com/document/d/1ZZkkeaaiFfnY1Ujsms5EpsBL88YcuavVsP2YTgYtxhk/edit#heading=h.cfnw4c1xhjip\r\n\r\n    private static sortDateDESC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n        //Om både colValue1[0] och colValue2[0] är \"Nej\"\r\n        if (!Date.parse(colValue1[0]) && !Date.parse(colValue2[0])) return 0;\r\n        // Om colValue1[0] = \"Nej\"\r\n        if (!Date.parse(colValue1[0])) return 1;\r\n        // Om colValue2[0] = \"Nej\"\r\n        if (!Date.parse(colValue2[0])) return -1;\r\n        // Om både colValue1[0] och colValue2[0] är giltiga datum, sortera fallande\r\n        //Se länk varför vi använder valueOf: https://stackoverflow.com/posts/60688789/timeline\r\n        return new Date(colValue2[0]).valueOf() - new Date(colValue1[0]).valueOf() as 1 | -1 | 0;\r\n    };\r\n\r\n    private static sortDateASC = (colValue1: [string, HTMLTableRowElement], colValue2: [string, HTMLTableRowElement]): 1 | -1 | 0 => {\r\n\r\n        //Om både colValue1[0] och colValue2[0] är \"Nej\"\r\n        if (!Date.parse(colValue1[0]) && !Date.parse(colValue2[0])) return 0;\r\n        // Om colValue1[0] = \"Nej\" \r\n        if (!Date.parse(colValue1[0])) return -1;\r\n        // Om colValue2[0] = \"Nej\"\r\n        if (!Date.parse(colValue2[0])) return 1;\r\n        // Om både colValue1[0] och colValue2[0] är giltiga datum, sortera stigande\r\n        //Se länk varför vi använder valueOf: https://stackoverflow.com/posts/60688789/timeline\r\n        return new Date(colValue1[0]).valueOf() - new Date(colValue2[0]).valueOf() as 1 | -1 | 0;\r\n    };\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"sourceRoot":""}